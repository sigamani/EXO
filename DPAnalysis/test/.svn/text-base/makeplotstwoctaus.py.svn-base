from os import listdir
import ROOT, math
from ROOT import TCanvas, gStyle, TFile, TH1F, gROOT, TLegend, THStack, TColor, kOrange, kRed, kWhite, kBlack,TPaveText,TAttMarker, kGreen, kBlue, TMath, kYellow, TPad

#fill the tree with desired variables, extra CUTS
def FillHist(met,photonE,dxy,dz,sMinPho,sMajPho,nJets,nPhotons,tree):

    cuts = open("cuts.txt","w")
    cuts.write("Cuts used in plotting macro." + '\n')
    cuts.write("nJets >= 2" + '\n')
    cuts.write("met >= 30" + '\n')
    cuts.write("nPhotons >= 2" + '\n')
    cuts.write("jetPt >= 30" + '\n')
    cuts.write("photons have to convert" + '\n')

    cuts.close()

    for event in tree:
        bool1 = False
        bool2 = False

        if event.nJets <= 1:
            continue

        if event.met < 30:
            continue

        if event.nPhotons <= 1:
            continue

        for j in range(len(event.jetPx)):
            if (TMath.Sqrt(event.jetPx[j]*event.jetPx[j]+event.jetPy[j]*event.jetPy[j]+event.jetPz[j]*event.jetPz[j]) < 30):
                bool1 = True

        if bool1:
            continue

        for j in range(len(event.phoDxy)):
            if event.phoDxy[j] > -500:
                bool2 = True
                
        if bool2 == False:
            continue
        
        for j in range(len(event.phoE)):
            #if event.aveTime[j]< -2:
               # continue
            if event.phoE[j] < 80:
                continue
            #if event.cHadIso[j] >= 2.6:
                #continue
            #if (event.nHadIso[j] >= (3.5 + ( 0.04*event.phoE[j])) ):
                #continue
            #if (event.photIso[j] >= (1.3 + ( 0.005*event.phoE[j] )) ):
                #continue
            #if event.phoDxy[j] <= 0.45:
                #continue
            else:
                photonE.Fill(event.phoE[j])
                dxy.Fill(TMath.Abs(event.phoDxy[j]))
                dz.Fill(TMath.Abs(event.phoDz[j]))
                sMinPho.Fill(event.sMinPho[j])
                sMajPho.Fill(event.sMajPho[j])
        met.Fill(event.met)
        nJets.Fill(event.nJets)
        nPhotons.Fill(event.nPhotons)
        

#output in latex file
def Output(gjet,signal,QCD,DY,TTJets,data,text):

    for j in range(len(gjet)):
        gjet[j]=round(gjet[j],3)
        signal[j]=round(signal[j],3)
        QCD[j]=round(QCD[j],3)
        DY[j]=round(DY[j],3)
        TTJets[j]=round(TTJets[j],3)
        data[j]=round(data[j],3)

    ratio0 = round(signal[0]/math.sqrt(gjet[0]+QCD[0]),3)
    ratio1 = round(signal[1]/math.sqrt(gjet[1]+QCD[1]),3)
    ratio2 = round(signal[2]/math.sqrt(gjet[2]+QCD[2]),3)
    ratio3 = round(signal[3]/math.sqrt(gjet[3]+QCD[3]),3)
    ratio4 = round(signal[4]/math.sqrt(gjet[4]+QCD[4]),3)
    ratio8 = round(signal[8]/math.sqrt(gjet[8]+QCD[8]),3)
    ratio10 = round(signal[10]/math.sqrt(gjet[10]+QCD[10]),3)
    ratio11 = round(signal[11]/math.sqrt(gjet[11]+QCD[11]),3)
    ratio12 = round(signal[12]/math.sqrt(gjet[12]+QCD[12]),3)
    ratio13 = round(signal[13]/math.sqrt(gjet[13]+QCD[13]),3)
    
    output = open("cutflow"+text+".tex","w")
    output.write("\\documentclass[8pt]{article}" + '\n')
    output.write("\\usepackage[margin=0.5in]{geometry}" + '\n')
    output.write("\\usepackage{verbatim}" + '\n')
    output.write("\\usepackage{hyperref}" + '\n')
    output.write("\\usepackage{epsfig}" + '\n')
    output.write("\\usepackage{graphicx}" + '\n')
    output.write("\\usepackage{epsfig}" + '\n')
    output.write("\\usepackage{subfigure,              rotating,              rotate}" + '\n')
    output.write("\\usepackage{relsize}" + '\n')
    output.write("\\usepackage{fancyheadings}" + '\n')
    output.write("\\usepackage[latin1]{inputenc}" + '\n')
    output.write("\\usepackage{footnpag}" + '\n')
    output.write("\\usepackage{enumerate}" + '\n')
    output.write("\\usepackage{color}" + '\n')
    output.write("\\newcommand{\\doglobally}[1]{{\\globaldefs=1#1}}" + '\n')
    output.write("\\begin{document}" + '\n')
    
    output.write("\\begin{tabular}{|c|c|c|c|c|c|c|}" + '\n')
    output.write("\\hline" + '\n')
    output.write("Variables & Signal ctau " + text + " cm & $\\gamma +$ jet & QCD & Total background & $\\frac{signal}{\\sqrt{background}}$  & data" + "\\\\" +'\n')
    output.write("\\hline" + '\n')
    output.write("Total &" +  str(signal[0]) + "&" + str(gjet[0]) + "&" + str(QCD[0]) + "&" + str(gjet[0]+QCD[0]) + "&" + str(ratio0)  + "& "+ str(data[0]) + "\\\\" + '\n' )
    output.write("Trigger &" + str(signal[1]) + "&" + str(gjet[1]) + "&" + str(QCD[1]) + "&" + str(gjet[1]+QCD[1]) + "&" + str(ratio1) + "& "+ str(data[1]) + "\\\\" + '\n' )
    output.write("Vertex &" + str(signal[2]) + "&" + str(gjet[2]) + "&" + str(QCD[2]) + "&" + str(gjet[2]+QCD[2]) + "&" + str(ratio2) + "&" + str(data[2]) + "\\\\" + '\n' )
    output.write("Photon &" + str(signal[3]) + "&" + str(gjet[3]) + "&" + str(QCD[3]) + "&" + str(gjet[3]+QCD[3]) + "&" + str(ratio3) + "\\\\" + '\n' )
    output.write("BeamHalo &" + str(signal[4]) + "&" + str(gjet[4]) + "&" + str(QCD[4]) + "&" + str(gjet[4]+QCD[4]) + "&" + str(ratio4) + "&" + str(data[4]) + "\\\\" + '\n' )
    output.write("Met \\textgreater30 &" + str(signal[8]) + "&" + str(gjet[8]) + "&" + str(QCD[8]) + "&" + str(gjet[8]+QCD[8]) + "&" + str(ratio8) + "&" + str(data[8]) + "\\\\" + '\n' )
    output.write("nJets(PT \\textgreater 30) $\\geq$ 2 &" + str(signal[10]) + "&" + str(gjet[10]) + "&" + str(QCD[10]) + "&" + str(gjet[10]+QCD[10]) + "&" + str(ratio10) + "&" + str(data[10]) + "\\\\" + '\n' )
    output.write("nPhotons \\textgreater 1 &" + str(signal[11]) + "&" + str(gjet[11]) + "&" + str(QCD[11]) + "&" + str(gjet[11]+QCD[11]) + "&" + str(ratio11) + "& "+ str(data[11]) + "\\\\" + '\n' )
    output.write("Conversionselection &" + str(signal[12]) + "&" + str(gjet[12]) + "&" + str(QCD[12]) + "&" + str(gjet[12]+QCD[12]) + "&" + str(ratio12) + "& "+ str(data[12]) + "\\\\" + '\n')
    output.write("dXY \\textgreater 0.45 &" + str(signal[13]) + "&" + str(gjet[13]) + "&" + str(QCD[13]) + "&" + str(gjet[13]+QCD[13]) + "&" + str(ratio13) + "&" + str(data[13]) + "\\\\" + " \\hline" + '\n')

    output.write("\\end{tabular}" + '\n')
    
    output.write("\\end{document}")

    output.close()
    
#label function
def label(quadrant):
    if (quadrant!=1 and quadrant !=2):
        print "This quadrant is not defined, choose a value of 1 or 2!"
    else:
        if (quadrant == 1):
            x1 = 0.1
            x2 = 0.25
            y1 = 0.94
            y2 = 1.0
        if (quadrant == 2):
            x1 = 0.75
            x2 = 0.9
            y1 = 0.94
            y2 = 1.0


    headlabel = TPaveText( x1, y1, x2, y2, "brNDC" )
    if (quadrant == 1):
        headlabel.AddText("CMS = 19 fb^{-1}")
    if (quadrant == 2):
        headlabel.AddText("#sqrt{s} = 8 TeV")

    headlabel.SetFillColor(kWhite)
    headlabel.SetTextSize(0.05)
    headlabel.SetTextFont(42)
    headlabel.SetBorderSize(0)
    headlabel.SetShadowColor(kWhite)

    return headlabel

#drawing a histogram
def DrawHist(string,bkg,signal,data,QCD,DY,TTJets,stack,cmslabel,sqrtlabel,text):
    signal.SetLineColor(kRed)
    signal.SetLineWidth(2)
    bkg.SetFillColor(kOrange)
    data.SetMarkerStyle(20)
    data.SetMarkerSize(0.5)
    data.SetMarkerColor(kBlack)
    QCD.SetFillColor(kGreen)
    DY.SetFillColor(kYellow)
    TTJets.SetFillColor(kBlue)
    ratio = data.Clone()
    ratio.SetMarkerStyle(20)
    ratio.SetMarkerSize(0.5)
    ratio.SetMarkerColor(kBlack)

    stack.Add(bkg)
    stack.Add(QCD)
    stack.Add(DY)
    stack.Add(TTJets)

    total = bkg.Clone()
    total.Add(QCD,1.)
    total.Add(DY,1.)
    total.Add(TTJets,1.)

    ratio.Divide(total)

    stack.SetMinimum(1e-3)
    stack.SetMaximum(1e4)
    
    c1 = TCanvas("c1","c1",600,500);
    gStyle.SetOptStat(0)
    pad1 = TPad("pad1", "pad1",0.01,0.27,0.99,0.99);
    pad1.SetTopMargin(0.1);
    pad1.SetBottomMargin(0.01);
    pad1.SetRightMargin(0.1);
    pad1.SetLogy()
    pad1.Draw()
    pad1.cd()
    leg = TLegend(0.45,0.70,0.89,0.89)
    leg.SetFillColor(kWhite)
    leg.SetTextSize(0.038)
    leg.SetTextFont(42)
    leg.SetBorderSize(0)
    leg.AddEntry(data, "DATA","pe")
    leg.AddEntry(bkg, "#gamma+jet","f")
    leg.AddEntry(QCD,"QCD","f")
    leg.AddEntry(TTJets,"TTJets","f")
    leg.AddEntry(signal, "GMSB (160,"+str(text)+" cm)","l")
    stack.Draw()
    stack.GetYaxis().SetTitle("Number of Events")
    stack.GetYaxis().SetTitleSize(0.05)
    signal.Draw("same")
    data.Draw("PEsame")
    leg.Draw("same")
    cmslabel.Draw("same")
    sqrtlabel.Draw("same")
    c1.cd()
    pad2 = TPad("pad2", "pad2",0.01,0.02,0.99,0.26)
    pad2.SetGrid()
    pad2.SetTopMargin(0.01)
    pad2.SetBottomMargin(0.3)
    pad2.SetRightMargin(0.1)
    pad2.Draw()
    pad2.cd()
    ratio.GetYaxis().SetTitle("Data/Bkg.")
    ratio.GetYaxis().SetTitleSize(0.15)
    ratio.GetXaxis().SetTitle(string)
    ratio.GetXaxis().SetTitleSize(0.17)
    ratio.GetYaxis().SetTitleOffset(0.3)
    ratio.GetXaxis().SetTitleOffset(0.3)
    ratio.GetYaxis().SetRangeUser(0.,5.)
    ratio.Draw("PE")
    c1.cd()
    c1.SaveAs(string+"ctau"+text+".png")


#drawing a histogram
def DrawHistdxy(string,bkg,signal1,signal2,data,QCD,DY,TTJets,stack,cmslabel,sqrtlabel,text):
    signal1.SetLineColor(kRed)
    signal1.SetLineWidth(2)
    signal2.SetLineColor(kBlue)
    signal2.SetLineWidth(2)
    bkg.SetFillColor(kOrange)
    data.SetMarkerStyle(20)
    data.SetMarkerSize(0.5)
    data.SetMarkerColor(kBlack)
    QCD.SetFillColor(kGreen)
    DY.SetFillColor(kYellow)
    TTJets.SetFillColor(kBlue)
    ratio = data.Clone()
    ratio.SetMarkerStyle(20)
    ratio.SetMarkerSize(0.5)
    ratio.SetMarkerColor(kBlack)
    
    stack.Add(bkg)
    stack.Add(QCD)
    stack.Add(DY)
    stack.Add(TTJets)
    
    total = bkg.Clone()
    total.Add(QCD,1.)
    total.Add(DY,1.)
    total.Add(TTJets,1.)
    
    ratio.Divide(total)
    
    stack.SetMinimum(1e-3)
    stack.SetMaximum(1e4)
    
    c1 = TCanvas("c1","c1",600,500);
    gStyle.SetOptStat(0)
    pad1 = TPad("pad1", "pad1",0.01,0.27,0.99,0.99);
    pad1.SetTopMargin(0.1);
    pad1.SetBottomMargin(0.01);
    pad1.SetRightMargin(0.1);
    pad1.SetLogy()
    pad1.Draw()
    pad1.cd()
    leg = TLegend(0.45,0.70,0.89,0.89)
    leg.SetFillColor(kWhite)
    leg.SetTextSize(0.038)
    leg.SetTextFont(42)
    leg.SetBorderSize(0)
    leg.AddEntry(data, "DATA","pe")
    leg.AddEntry(bkg, "#gamma+jet","f")
    leg.AddEntry(QCD,"QCD","f")
    leg.AddEntry(TTJets,"TTJets","f")
    leg.AddEntry(signal1, "GMSB (160,"+str(text)+" cm)","l")
    leg.AddEntry(signal2, "GMSB (160,"+str(text)+" cm)","l")
    stack.Draw()
    stack.GetYaxis().SetTitle("Number of Events")
    stack.GetYaxis().SetTitleSize(0.05)
    signal1.Draw("same")
    signal2.Draw("same")
    data.Draw("PEsame")
    leg.Draw("same")
    cmslabel.Draw("same")
    sqrtlabel.Draw("same")
    c1.cd()
    pad2 = TPad("pad2", "pad2",0.01,0.02,0.99,0.26)
    pad2.SetGrid()
    pad2.SetTopMargin(0.01)
    pad2.SetBottomMargin(0.3)
    pad2.SetRightMargin(0.1)
    pad2.Draw()
    pad2.cd()
    ratio.GetYaxis().SetTitle("Data/Bkg.")
    ratio.GetYaxis().SetTitleSize(0.15)
    ratio.GetXaxis().SetTitle(string)
    ratio.GetXaxis().SetTitleSize(0.17)
    ratio.GetYaxis().SetTitleOffset(0.3)
    ratio.GetXaxis().SetTitleOffset(0.3)
    ratio.GetYaxis().SetRangeUser(0.,5.)
    ratio.Draw("PE")
    c1.cd()
    c1.SaveAs(string+"ctau"+text+".png")

def make(maplist,text):                      
    #Cross section for different bins: 0-5:bkg, 6-7: signal, 8-13: QCD, 14: TTJets
    sigma = [3322.309,558.2865,108.0068,30.12207,2.138632,0.2119244,0.0277,0.0277,1033680.0,156293.3,34138.15,113.8791,26.9921,3.550036,13.43]

    #Luminosity in pb^-1
    lumin = 19000

    #print cutflow values
    gjetflow = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    signalflow = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    QCDflow = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    DYflow = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    TTJetsflow = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    dataflow = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]

    #open histogram, one to add all data for bkg, one for signal and one for data
    metbkg = TH1F("metbkg","",200,0,400)
    metsignal = TH1F("metsignal","",200,0,400)
    metdata = TH1F("metdata","",200,0,400)
    metQCD = TH1F("metQCD","",200,0,400)
    metDY = TH1F("metDY","",200,0,400)
    metTTJets = TH1F("metTTJets","",200,0,400)
    hsmet = THStack("hsmet","")

    photonEbkg = TH1F("photonEbkg","",200,0,400)
    photonEsignal = TH1F("photonEsignal","",200,0,400)
    photonEdata = TH1F("photonEdata","",200,0,400)
    photonEQCD = TH1F("photonEQCD","",200,0,400)    
    photonEDY = TH1F("photonEDY","",200,0,400)
    photonETTJets = TH1F("photonETTJets","",200,0,400)
    hsphotonE = THStack("hsphotonE","")

    dxybkg = TH1F("dxybkg","",30,0,30)
    dxysignal1 = TH1F("dxysignal1","",30,0,30)
    dxysignal2 = TH1F("dxysignal2","",30,0,30)
    dxydata = TH1F("dxydata","",30,0,30)
    dxyQCD = TH1F("dxyQCD","",30,0,30)
    dxyDY = TH1F("dxyDY","",30,0,30)
    dxyTTJets = TH1F("dxyTTJets","",30,0,30)
    hsdxy = THStack("hsdxy","")

    dzbkg = TH1F("dzbkg","",200,0,200)
    dzsignal = TH1F("dzsignal","",200,0,200)
    dzdata = TH1F("dzdata","",200,0,200)
    dzQCD = TH1F("dzQCD","",200,0,200)
    dzDY = TH1F("dzDY","",200,0,200)
    dzTTJets = TH1F("dzTTJets","",200,0,200)
    hsdz = THStack("hsdz","")

    nJetsbkg = TH1F("nJetsbkg","",10,0,10)
    nJetssignal = TH1F("nJetssignal","",10,0,10)
    nJetsdata = TH1F("nJetsdata","",10,0,10)
    nJetsQCD = TH1F("nJetsQCD","",10,0,10)
    nJetsDY = TH1F("nJetsDY","",10,0,10)
    nJetsTTJets = TH1F("nJetsTTJets","",10,0,10)
    hsnJets = THStack("hsnJets","")

    sMajPhobkg = TH1F("sMajPhobkg","",100,0,2)
    sMajPhosignal = TH1F("sMajPhosignal","",100,0,2)
    sMajPhodata = TH1F("sMajPhodata","",100,0,2)
    sMajPhoQCD = TH1F("sMajPhoQCD","",100,0,2)
    sMajPhoDY = TH1F("sMajPhoDY","",100,0,2)
    sMajPhoTTJets = TH1F("sMajPhoTTJets","",100,0,2)
    hssMajPho = THStack("hssMajPho","")

    sMinPhobkg = TH1F("sMinPhobkg","",100,0,0.5)
    sMinPhosignal = TH1F("sMinPhosignal","",100,0,0.5)
    sMinPhodata = TH1F("sMinPhodata","",100,0,0.5)
    sMinPhoQCD = TH1F("sMinPhoQCD","",100,0,0.5)
    sMinPhoDY = TH1F("sMinPhoDY","",100,0,0.5)
    sMinPhoTTJets = TH1F("sMinPhoTTJets","",100,0,0.5)
    hssMinPho = THStack("hsMinPho","")
    
    nPhotonsbkg = TH1F("nPhotonsbkg","",10,0,10)
    nPhotonssignal = TH1F("nPhotonsignal","",10,0,10)
    nPhotonsdata = TH1F("nPhotonsdata","",10,0,10)
    nPhotonsQCD = TH1F("nPhotonsQCD","",10,0,10)
    nPhotonsDY = TH1F("nPhotonsDY","",10,0,10)
    nPhotonsTTJets = TH1F("nPhotonsTTJets","",10,0,10)
    hsnPhotons = THStack("hsnPhotons","")

    #loop over all gamma+jets maps to add all events in one histogram
    for item in range(6):

        print "Total files: " + str(len(maplist)) + ". Busy on: " + str(item+1)
        data=TFile.Open(maplist[item])
        tree = data.Get("DPAnalysis")
        cutflow = data.Get("CutFlow")
        h = TH1F("h","",100000,0,100000)
        c1 = TCanvas()
        cutflow.Draw("counter[0]>>h")
        entries = 0
        for j in range(100000):
            entries+=j*h.GetBinContent(j)
        eff = 1/entries
        c1.Close()

        #scaling needed for different cross sections, assuming lumin of 20 000 pb^-1
        scale = lumin*sigma[item]*eff

        metbkgtemp = TH1F("metbkgtemp","",200,0,400)
        photonEbkgtemp = TH1F("photonEbkgtemp","",200,0,400)
        dxybkgtemp = TH1F("dxybkgtemp","",30,0,30)
        dzbkgtemp = TH1F("dzbkgtemp","",200,0,200)
        sMinPhobkgtemp = TH1F("sMinPhobkgtemp","",100,0,0.5)
        sMajPhobkgtemp = TH1F("sMajPhobkgtemp","",100,0,2)
        nJetsbkgtemp = TH1F("nJetsbkgtemp","",10,0,10)
        nPhotonsbkgtemp = TH1F("nPhotonsbkgtemp","",10,0,10)
        
        FillHist(metbkgtemp,photonEbkgtemp,dxybkgtemp,dzbkgtemp,sMinPhobkgtemp,sMajPhobkgtemp,nJetsbkgtemp,nPhotonsbkgtemp,tree)

        """
        gjetflow[0] += entries.GetBinContent(1)*scale
        gjetflow[1] += entries.GetBinContent(2)*scale
        gjetflow[2] += entries.GetBinContent(3)*scale
        gjetflow[3] += entries.GetBinContent(4)*scale
        gjetflow[4] += entries.GetBinContent(5)*scale
        gjetflow[5] += entries.GetBinContent(6)*scale
        gjetflow[6] += entries.GetBinContent(7)*scale
        gjetflow[7] += tree.GetEntries()*scale
        gjetflow[8] += tree.GetEntries("met>=30")*scale
        gjetflow[9] += tree.GetEntries("met>=30 && nJets > 1")*scale
        gjetflow[10] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900")*scale
        gjetflow[11] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1")*scale
        gjetflow[12] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > -900")*scale
        gjetflow[13] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > 0.45")*scale
        """
        
        metbkgtemp.Scale(scale)
        photonEbkgtemp.Scale(scale)
        dxybkgtemp.Scale(scale)
        dzbkgtemp.Scale(scale)
        sMinPhobkgtemp.Scale(scale)
        sMajPhobkgtemp.Scale(scale)
        nJetsbkgtemp.Scale(scale)
        nPhotonsbkgtemp.Scale(scale)

        
        metbkg.Add(metbkgtemp,1.)
        photonEbkg.Add(photonEbkgtemp,1.)
        dxybkg.Add(dxybkgtemp,1.)
        dzbkg.Add(dzbkgtemp,1.)
        sMinPhobkg.Add(sMinPhobkgtemp,1.)
        sMajPhobkg.Add(sMajPhobkgtemp,1.)
        nJetsbkg.Add(nJetsbkgtemp,1.)
        nPhotonsbkg.Add(nPhotonsbkgtemp,1.)
        data.Close()
           
    #loop over signal1 file
    print "Total files: " + str(len(maplist)) + ". Busy on: 7"
    data=TFile.Open(maplist[6])
    tree = data.Get("DPAnalysis")
    cutflow= data.Get("CutFlow")
    c1 = TCanvas()    
    h = TH1F("h","",100000,0,100000)
    cutflow.Draw("counter[0]>>h")    
    entries = 0
    for j in range(100000):
        entries+=j*h.GetBinContent(j)
    eff = 1/entries
    c1.Close()
        
    scale = lumin*sigma[6]*eff
    
    metsignaltemp = TH1F("metsignaltemp","",200,0,400)
    photonEsignaltemp = TH1F("photonEsignaltemp","",200,0,400)
    dxysignaltemp = TH1F("dxysignaltemp","",30,0,30)
    dzsignaltemp = TH1F("dzsignaltemp","",200,0,200)    
    sMinPhosignaltemp = TH1F("sMinPhosignaltemp","",100,0,0.5)
    sMajPhosignaltemp = TH1F("sMajPhosignaltemp","",100,0,2)
    nJetssignaltemp = TH1F("nJetssignaltemp","",10,0,10)
    nPhotonssignaltemp = TH1F("nPhotonssignaltemp","",10,0,10)

    FillHist(metsignaltemp,photonEsignaltemp,dxysignaltemp,dzsignaltemp,sMinPhosignaltemp,sMajPhosignaltemp,nJetssignaltemp,nPhotonssignaltemp,tree)

    """
    signalflow[0] += entries.GetBinContent(1)*scale
    signalflow[1] += entries.GetBinContent(2)*scale
    signalflow[2] += entries.GetBinContent(3)*scale
    signalflow[3] += entries.GetBinContent(4)*scale
    signalflow[4] += entries.GetBinContent(5)*scale
    signalflow[5] += entries.GetBinContent(6)*scale
    signalflow[6] += entries.GetBinContent(7)*scale
    signalflow[7] += tree.GetEntries()*scale
    signalflow[8] += tree.GetEntries("met>=30")*scale
    signalflow[9] += tree.GetEntries("met>=30 && nJets > 1")*scale
    signalflow[10] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900")*scale
    signalflow[11] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1")*scale
    signalflow[12] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > -900")*scale
    signalflow[13] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > 0.45")*scale
    """

    metsignaltemp.Scale(scale)
    photonEsignaltemp.Scale(scale)
    dxysignaltemp.Scale(scale)
    dzsignaltemp.Scale(scale)
    sMinPhosignaltemp.Scale(scale)
    sMajPhosignaltemp.Scale(scale)
    nJetssignaltemp.Scale(scale)
    nPhotonssignaltemp.Scale(scale)
        
    metsignal.Add(metsignaltemp,1.)
    photonEsignal.Add(photonEsignaltemp,1.)
    dxysignal1.Add(dxysignaltemp,1.)
    dzsignal.Add(dzsignaltemp,1.)
    sMinPhosignal.Add(sMinPhosignaltemp,1.)
    sMajPhosignal.Add(sMajPhosignaltemp,1.)
    nJetssignal.Add(nJetssignaltemp,1.)
    nPhotonssignal.Add(nPhotonssignaltemp,1.)
    
    data.Close()

    #loop over signal2 file
    print "Total files: " + str(len(maplist)) + ". Busy on: 8"
    data=TFile.Open(maplist[7])
    tree = data.Get("DPAnalysis")
    cutflow= data.Get("CutFlow")
    c1 = TCanvas()
    h = TH1F("h","",100000,0,100000)
    cutflow.Draw("counter[0]>>h")
    entries = 0
    for j in range(100000):
        entries+=j*h.GetBinContent(j)
    eff = 1/entries
    c1.Close()
    
    scale = lumin*sigma[7]*eff
            
    metsignaltemp = TH1F("metsignaltemp","",200,0,400)
    photonEsignaltemp = TH1F("photonEsignaltemp","",200,0,400)
    dxysignaltemp = TH1F("dxysignaltemp","",30,0,30)
    dzsignaltemp = TH1F("dzsignaltemp","",200,0,200)
    sMinPhosignaltemp = TH1F("sMinPhosignaltemp","",100,0,0.5)
    sMajPhosignaltemp = TH1F("sMajPhosignaltemp","",100,0,2)
    nJetssignaltemp = TH1F("nJetssignaltemp","",10,0,10)
    nPhotonssignaltemp = TH1F("nPhotonssignaltemp","",10,0,10)
    
    FillHist(metsignaltemp,photonEsignaltemp,dxysignaltemp,dzsignaltemp,sMinPhosignaltemp,sMajPhosignaltemp,nJetssignaltemp,nPhotonssignaltemp,tree)
    
    metsignaltemp.Scale(scale)
    photonEsignaltemp.Scale(scale)
    dxysignaltemp.Scale(scale)
    dzsignaltemp.Scale(scale)
    sMinPhosignaltemp.Scale(scale)
    sMajPhosignaltemp.Scale(scale)
    nJetssignaltemp.Scale(scale)
    nPhotonssignaltemp.Scale(scale)
    
    metsignal.Add(metsignaltemp,1.)
    photonEsignal.Add(photonEsignaltemp,1.)
    dxysignal2.Add(dxysignaltemp,1.)
    dzsignal.Add(dzsignaltemp,1.)
    sMinPhosignal.Add(sMinPhosignaltemp,1.)
    sMajPhosignal.Add(sMajPhosignaltemp,1.)
    nJetssignal.Add(nJetssignaltemp,1.)
    nPhotonssignal.Add(nPhotonssignaltemp,1.)

    data.Close()
            
    #loop over QCD files
    for item in range(8,14):
        
        print "Total files: " + str(len(maplist)) + ". Busy on: " + str(item+1)
        data=TFile.Open(maplist[item])
        tree = data.Get("DPAnalysis")
        cutflow= data.Get("CutFlow")
        c1 = TCanvas()
        h = TH1F("h","",100000,0,100000)
        cutflow.Draw("counter[0]>>h")
        entries = 0
        for j in range(100000):
            entries+=j*h.GetBinContent(j)
        eff = 1/entries
        c1.Close()
            
        scale = lumin*sigma[item]*eff
        
        metQCDtemp = TH1F("metQCDtemp","",200,0,400)
        photonEQCDtemp = TH1F("photonEQCDtemp","",200,0,400)
        dxyQCDtemp = TH1F("dxyQCDtemp","",30,0,30)
        dzQCDtemp = TH1F("dzQCDtemp","",200,0,200)
        sMinPhoQCDtemp = TH1F("sMinPhoQCDtemp","",100,0,0.5)
        sMajPhoQCDtemp = TH1F("sMajPhoQCDtemp","",100,0,2)
        nJetsQCDtemp = TH1F("nJetsQCDtemp","",10,0,10)
        nPhotonsQCDtemp = TH1F("nPhotonsQCDtemp","",10,0,10)
        
        FillHist(metQCDtemp,photonEQCDtemp,dxyQCDtemp,dzQCDtemp,sMinPhoQCDtemp,sMajPhoQCDtemp,nJetsQCDtemp,nPhotonsQCDtemp,tree)

        """
        QCDflow[0] += entries.GetBinContent(1)*scale
        QCDflow[1] += entries.GetBinContent(2)*scale
        QCDflow[2] += entries.GetBinContent(3)*scale
        QCDflow[3] += entries.GetBinContent(4)*scale
        QCDflow[4] += entries.GetBinContent(5)*scale
        QCDflow[5] += entries.GetBinContent(6)*scale
        QCDflow[6] += entries.GetBinContent(7)*scale
        QCDflow[7] += tree.GetEntries()*scale
        QCDflow[8] += tree.GetEntries("met>=30")*scale
        QCDflow[9] += tree.GetEntries("met>=30 && nJets > 1")*scale
        QCDflow[10] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900")*scale
        QCDflow[11] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1")*scale
        QCDflow[12] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > -900")*scale
        QCDflow[13] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > 0.45")*scale
        """
        
        metQCD.Scale(scale)
        photonEQCD.Scale(scale)
        dxyQCD.Scale(scale)
        dzQCD.Scale(scale)
        sMinPhoQCD.Scale(scale)
        sMajPhoQCD.Scale(scale)
        nJetsQCD.Scale(scale)
        nPhotonsQCD.Scale(scale)

        metQCD.Add(metQCDtemp,1.)
        photonEQCD.Add(photonEQCDtemp,1.)
        dxyQCD.Add(dxyQCDtemp,1.)
        dzQCD.Add(dzQCDtemp,1.)
        sMinPhoQCD.Add(sMinPhoQCDtemp,1.)
        sMajPhoQCD.Add(sMajPhoQCDtemp,1.)
        nJetsQCD.Add(nJetsQCDtemp,1.)
        nPhotonsQCD.Add(nPhotonsQCDtemp,1.)
        
        data.Close()
    """            
    #loop over DYToMuMu file
    print "Total files: " + str(len(maplist)) + ". Busy on: 14"
    data=TFile.Open(maplist[13])
    tree = data.Get("DPAnalysis")
    entries= data.Get("Entries")
    eff = 1./entries.GetBinContent(1)
    
    scale = lumin*sigma[13]*eff
    
    metDYtemp = TH1F("metDYtemp","",200,0,400)
    photonEDYtemp = TH1F("photonEDYtemp","",200,0,400)
    dxyDYtemp = TH1F("dxyDYtemp","",30,0,30)
    dzDYtemp = TH1F("dzDYtemp","",200,0,200)
    sMinPhoDYtemp = TH1F("sMinPhoDYtemp","",100,0,0.5)
    sMajPhoDYtemp = TH1F("sMajPhoDYtemp","",100,0,2)
    nJetsDYtemp = TH1F("nJetsDYtemp","",10,0,10)
    nPhotonsDYtemp = TH1F("nPhotonsDYtemp","",10,0,10)
    
    FillHist(metDYtemp,photonEDYtemp,dxyDYtemp,dzDYtemp,sMinPhoDYtemp,sMajPhoDYtemp,nJetsDYtemp,nPhotonsDYtemp,tree)

    DYflow[0] += entries.GetBinContent(1)*scale
    DYflow[1] += entries.GetBinContent(2)*scale
    DYflow[2] += entries.GetBinContent(3)*scale
    DYflow[3] += entries.GetBinContent(4)*scale
    DYflow[4] += entries.GetBinContent(5)*scale
    DYflow[5] += entries.GetBinContent(6)*scale
    DYflow[6] += entries.GetBinContent(7)*scale
    DYflow[7] += tree.GetEntries()*scale
    DYflow[8] += tree.GetEntries("met>=30")*scale
    DYflow[9] += tree.GetEntries("met>=30 && nJets > 1")*scale
    DYflow[10] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900")*scale
    DYflow[11] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1")*scale
    DYflow[12] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > -900")*scale
    DYflow[13] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > 0.45")*scale
    
    metDYtemp.Scale(scale)
    photonEDYtemp.Scale(scale)
    dxyDYtemp.Scale(scale)
    dzDYtemp.Scale(scale)
    sMinPhoDYtemp.Scale(scale)
    sMajPhoDYtemp.Scale(scale)
    nJetsDYtemp.Scale(scale)
    nPhotonsDYtemp.Scale(scale)
    
    metDY.Add(metDYtemp,1.)
    photonEDY.Add(photonEDYtemp,1.)
    dxyDY.Add(dxyDYtemp,1.)
    dzDY.Add(dzDYtemp,1.)
    sMinPhoDY.Add(sMinPhoDYtemp,1.)
    sMajPhoDY.Add(sMajPhoDYtemp,1.)
    nJetsDY.Add(nJetsDYtemp,1.)
    nPhotonsDY.Add(nPhotonsDYtemp,1.)
    
    data.Close()
    """
    #loop over TTJets file
    print "Total files: " + str(len(maplist)) + ". Busy on: 15"
    data=TFile.Open(maplist[14])
    tree = data.Get("DPAnalysis")
    cutflow= data.Get("CutFlow")
    c1 = TCanvas()
    h = TH1F("h","",100000,0,100000)
    cutflow.Draw("counter[0]>>h")
    entries = 0
    for j in range(100000):
        entries+=j*h.GetBinContent(j)
    eff = 1/entries
    c1.Close()
    
    scale = lumin*sigma[14]*eff
    
    metTTJetstemp = TH1F("metTTJetstemp","",200,0,400)
    photonETTJetstemp = TH1F("photonETTJetstemp","",200,0,400)
    dxyTTJetstemp = TH1F("dxyTTJetstemp","",30,0,30)
    dzTTJetstemp = TH1F("dzTTJetstemp","",200,0,200)
    sMinPhoTTJetstemp = TH1F("sMinPhoTTJetstemp","",100,0,0.5)
    sMajPhoTTJetstemp = TH1F("sMajPhoTTJetstemp","",100,0,2)
    nJetsTTJetstemp = TH1F("nJetsTTJetstemp","",10,0,10)
    nPhotonsTTJetstemp = TH1F("nPhotonsTTJetstemp","",10,0,10)
    
    FillHist(metTTJetstemp,photonETTJetstemp,dxyTTJetstemp,dzTTJetstemp,sMinPhoTTJetstemp,sMajPhoTTJetstemp,nJetsTTJetstemp,nPhotonsTTJetstemp,tree)

    """
    TTJetsflow[0] += entries.GetBinContent(1)*scale
    TTJetsflow[1] += entries.GetBinContent(2)*scale
    TTJetsflow[2] += entries.GetBinContent(3)*scale
    TTJetsflow[3] += entries.GetBinContent(4)*scale
    TTJetsflow[4] += entries.GetBinContent(5)*scale
    TTJetsflow[5] += entries.GetBinContent(6)*scale
    TTJetsflow[6] += entries.GetBinContent(7)*scale
    TTJetsflow[7] += tree.GetEntries()*scale
    TTJetsflow[8] += tree.GetEntries("met>=30")*scale
    TTJetsflow[9] += tree.GetEntries("met>=30 && nJets > 1")*scale
    TTJetsflow[10] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900")*scale
    TTJetsflow[11] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1")*scale
    TTJetsflow[12] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > -900")*scale
    TTJetsflow[13] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > 0.45")*scale
    """
    
    metTTJetstemp.Scale(scale)
    photonETTJetstemp.Scale(scale)
    dxyTTJetstemp.Scale(scale)
    dzTTJetstemp.Scale(scale)
    sMinPhoTTJetstemp.Scale(scale)
    sMajPhoTTJetstemp.Scale(scale)
    nJetsTTJetstemp.Scale(scale)
    nPhotonsTTJetstemp.Scale(scale)
    
    metTTJets.Add(metTTJetstemp,1.)
    photonETTJets.Add(photonETTJetstemp,1.)
    dxyTTJets.Add(dxyTTJetstemp,1.)
    dzTTJets.Add(dzTTJetstemp,1.)
    sMinPhoTTJets.Add(sMinPhoTTJetstemp,1.)
    sMajPhoTTJets.Add(sMajPhoTTJetstemp,1.)
    nJetsTTJets.Add(nJetsTTJetstemp,1.)
    nPhotonsTTJets.Add(nPhotonsTTJetstemp,1.)
    
    data.Close()
    
    #loop over data files
    for item in range(15,18):

        print "Total files: " + str(len(maplist)) + ". Busy on: " + str(item+1)
        data=TFile.Open(maplist[item])
        tree = data.Get("DPAnalysis")
        
        metdatatemp = TH1F("metdatatemp","",200,0,400)
        photonEdatatemp = TH1F("photonEdatatemp","",200,0,400)
        dxydatatemp = TH1F("dxydatatemp","",30,0,30)
        dzdatatemp = TH1F("dzdatatemp","",200,0,200)
        sMinPhodatatemp = TH1F("sMinPhodatatemp","",100,0,0.5)
        sMajPhodatatemp = TH1F("sMajPhodatatemp","",100,0,2)
        nJetsdatatemp = TH1F("nJetsdatatemp","",10,0,10)
        nPhotonsdatatemp = TH1F("nPhotonsdatatemp","",10,0,10)
        
        FillHist(metdatatemp,photonEdatatemp,dxydatatemp,dzdatatemp,sMinPhodatatemp,sMajPhodatatemp,nJetsdatatemp,nPhotonsdatatemp,tree)

        """
        dataflow[0] += entries.GetBinContent(1)
        dataflow[1] += entries.GetBinContent(2)
        dataflow[2] += entries.GetBinContent(3)
        dataflow[3] += entries.GetBinContent(4)
        dataflow[4] += entries.GetBinContent(5)
        dataflow[5] += entries.GetBinContent(6)
        dataflow[6] += entries.GetBinContent(7)
        dataflow[7] += tree.GetEntries()
        dataflow[8] += tree.GetEntries("met>=30")
        dataflow[9] += tree.GetEntries("met>=30 && nJets > 1")
        dataflow[10] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900")
        dataflow[11] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1")
        dataflow[12] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > -900")
        dataflow[13] += tree.GetEntries("met>=30 && nJets > 1 && (jetPx*jetPx+jetPy*jetPy+jetPz*jetPz) > 900 && nPhotons > 1 && phoDxy > 0.45")
        """
        
        metdata.Add(metdatatemp,1.)
        photonEdata.Add(photonEdatatemp,1.)
        dxydata.Add(dxydatatemp,1.)
        dzdata.Add(dzdatatemp,1.)
        sMinPhodata.Add(sMinPhodatatemp,1.)
        sMajPhodata.Add(sMajPhodatatemp,1.)
        nJetsdata.Add(nJetsdatatemp,1.)
        nPhotonsdata.Add(nPhotonsdatatemp,1.)
        
        data.Close()
    
    #setting the labels
    cmslabel = label(1)
    sqrtlabel = label(2)
    
    #drawing the met, photonE, dXY, dZ, sMinPho, sMajPho and nJets histograms
    DrawHist("met",metbkg,metsignal,metdata,metQCD,metDY,metTTJets,hsmet,cmslabel,sqrtlabel,text)
    DrawHist("photonE",photonEbkg,photonEsignal,photonEdata,photonEQCD,photonEDY,photonETTJets,hsphotonE,cmslabel,sqrtlabel,text)
    DrawHistdxy("dxy",dxybkg,dxysignal1,dxysignal2,dxydata,dxyQCD,dxyDY,dxyTTJets,hsdxy,cmslabel,sqrtlabel,text)
    DrawHist("dz",dzbkg,dzsignal,dzdata,dzQCD,dzDY,dzTTJets,hsdz,cmslabel,sqrtlabel,text)
    DrawHist("nJets",nJetsbkg,nJetssignal,nJetsdata,nJetsQCD,nJetsDY,nJetsTTJets,hsnJets,cmslabel,sqrtlabel,text)
    DrawHist("nPhotons",nPhotonsbkg,nPhotonssignal,nPhotonsdata,nPhotonsQCD,nPhotonsDY,nPhotonsTTJets,hsnPhotons,cmslabel,sqrtlabel,text)

    #make the output
    #Output(gjetflow,signalflow,QCDflow,DYflow,TTJetsflow,dataflow,text)

def main():

    input = raw_input("Choose between ctau equal to 1 (a), 10 (b), 20 (c), 100 (d), 250 (e), 500 (f), 2000 (g), 4000 (h) and 6000 (i).")
    print ""


    #saving the maps: 0-5:bkg, 6: signal, 7-8:data 
    #maplist = ["bkg50to80.root","bkg80to120.root","bkg120to170.root","bkg170to300.root","bkg300to470.root","bkg470to800.root","","QCD_Pt-80to120.root","QCD_Pt-170to300.root","QCD_Pt-470to600.root","QCD_Pt-600to800.root","QCD_Pt-800to1000.root","DYToMuMu.root","Run2012Cdata.root","Run2012Ddata.root"]
    
    text = ""

    maplist = ["bkg50to80.root","bkg80to120.root","bkg120to170.root","bkg170to300.root","bkg300to470.root","bkg470to800.root","","","QCD_Pt-80to120.root","QCD_Pt-120to170.root","QCD_Pt-170to300.root","QCD_Pt-470to600.root","QCD_Pt-600to800.root","QCD_Pt-800to1000.root","TTJets.root","Run2012Bdata.root","Run2012Cdata.root","Run2012Ddata.root"]

    if input == 'a':
        maplist[6] = "Signalctau1.root"
        text = "0.1"
        
    elif input == 'b':
        maplist[6] = "Signalctau10.root"
        text = "1"
        
    elif input == 'c':
        maplist[6] = "Signalctau20.root"
        text = "2"
        
    elif input == 'd':
        maplist[6] = "Signalctau100.root"
        text = "10"
        
    elif input == 'e':
        maplist[6] = "Signalctau250.root"
        maplist[7] = "Signalctau500.root"
        text = "25and50"
        
    elif input == 'f':
        maplist[6] = "Signalctau500.root"
        text = "50"

    elif input == 'g':
        maplist[6] = "Signalctau2000.root"
        text = "200"

    elif input == 'h':
        maplist[6] = "Signalctau4000.root"
        text = "400"

    elif input == 'i':
        maplist[6] = "Signalctau6000.root"
        text = "600"

    else:
        print "You have to chose between a, b, c, d, e, f, g, h or i!"
        print ""
        print ""


    """

    input = raw_input("Choose between ctau equal to 1 (a), 250 (b), 500 (c) or 2000 (d).")
    print ""

    #saving the maps: 0-5:gjets, 6: signal, 7-12: QCD, 13: DYtoMuMu , 14: TTJets, 15-16:data
    maplist = ["bkg50to80.root","bkg80to120.root","bkg120to170.root","bkg170to300.root","bkg300to470.root","bkg470to800.root","","QCD_Pt-80to120.root","QCD_Pt-120to170.root","QCD_Pt-170to300.root","QCD_Pt-470to600.root","QCD_Pt-600to800.root","QCD_Pt-800to1000.root","DYToMuMu.root","TTJets.root","Run2012Cdata.root","Run2012Ddata.root","Run2012Bdata.root"]
    text = ""
    
    if input == 'a':
        maplist[6] = "Signalctau1.root"
        text = "0.1"
        
    elif input == 'b':
        maplist[6] = "Signalctau250.root"
        text = "25"
        
    elif input == 'c':
        maplist[6] = "Signalctau500.root"
        text = "50"
        
    elif input == 'd':
        maplist[6] = "Signalctau2000.root"
        text = "200"
        
    else:
        print "You have to chose between a, b, c or d!"
        print ""
        print ""

    """
        
    make(maplist,text)

if __name__ == "__main__":
    main()
